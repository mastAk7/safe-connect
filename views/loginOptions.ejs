<%- include('partials/loginHeader') %>

<!-- Login Screen -->
<div id="login-screen" class="login-screen">
    <div class="splash-logo-container" style="width: 100px; height: 100px;">
        <svg class="splash-logo" viewBox="0 0 200 200" xmlns="http://www.w3.org/2000/svg">
            <!-- Outer Circle -->
            <circle cx="100" cy="100" r="95" fill="#ffffff" stroke="#4169e1" stroke-width="5"/>
           
            <!-- Shield Background -->
            <path d="M100,25 C100,25 70,15 40,25 C40,25 40,50 40,90 C40,130 80,160 100,175 C120,160 160,130 160,90 C160,50 160,25 160,25 C130,15 100,25 100,25 Z" fill="#4169e1"/>
           
            <!-- Location Pin in Shield -->
            <circle cx="100" cy="80" r="12" fill="#ffffff"/>
            <path d="M100,92 C100,92 75,115 100,140 C125,115 100,92 100,92 Z" fill="#ffffff"/>
           
            <!-- Connecting Lines/WiFi Symbol -->
            <path d="M60,65 A65,65 0 0,1 140,65" stroke="#ffffff" stroke-width="6" fill="transparent"/>
            <path d="M70,50 A50,50 0 0,1 130,50" stroke="#ffffff" stroke-width="6" fill="transparent"/>
            <path d="M80,35 A35,35 0 0,1 120,35" stroke="#ffffff" stroke-width="6" fill="transparent"/>
           
            <!-- Text at bottom -->
            <text x="100" y="190" font-family="Arial, sans-serif" font-size="18" font-weight="bold" fill="#4169e1" text-anchor="middle">SafeConnect</text>
        </svg>
    </div>
    <p>Sign in to access your SafeConnect account</p>
   
    <div class="login-options">
        <div class="login-option" data-option="phone">
            <i class="fas fa-mobile-alt"></i>
            <span>Phone</span>
        </div>
        <div class="login-option" data-option="aadhaar">
            <i class="fas fa-id-card"></i>
            <span>Aadhaar</span>
        </div>
        <div class="login-option active" data-option="email">
            <i class="fas fa-envelope"></i>
            <span>Email</span>
        </div>
    </div>
   
    <div id="phone-login" style="display: none;">
        <div class="form-group">
            <label for="phone-number">Phone Number (with country code) </label>
            <input type="tel" id="phone-number" class="form-control" placeholder="+1234567890">
        </div>
        <div id="recaptcha-container" class="form-group"></div>
        <button id="send-otp" class="btn">Send OTP</button>
    </div>

    <div id="otp-container" class="hidden">
        <div class="form-group">
          <label for="otp-code">Enter the verification code</label>
          <input type="text" id="otp-code" placeholder="123456">
        </div>
        <button id="verify-otp" class="btn">Verify</button>
      </div>
    
      <div id="message" class="hidden"></div>

      <script>
        const firebaseConfig = {
  apiKey: "<%= process.env.FIREBASE_API_KEY %>",
  authDomain: "<%= process.env.FIREBASE_PROJECT_ID %>.firebaseapp.com",
  projectId: "<%= process.env.FIREBASE_PROJECT_ID %>",
  storageBucket: "<%= process.env.FIREBASE_PROJECT_ID %>.appspot.com",
  messagingSenderId: "<%= process.env.FIREBASE_MESSAGING_SENDER_ID %>",
  appId: "<%= process.env.FIREBASE_APP_ID %>"
};

// Initialize Firebase
firebase.initializeApp(firebaseConfig);
const auth = firebase.auth();
auth.languageCode = 'en';

// DOM elements
const phoneContainer = document.getElementById('phone-login');
const otpContainer = document.getElementById('otp-container');
const phoneInput = document.getElementById('phone-number');
const otpInput = document.getElementById('otp-code');
const sendOtpButton = document.getElementById('send-otp');
const verifyOtpButton = document.getElementById('verify-otp');
const messageElement = document.getElementById('message');
const recaptchaContainer = document.getElementById('recaptcha-container');

// Make sure OTP container is hidden initially
if (otpContainer) {
  otpContainer.classList.add('hidden');
}

// Add recaptcha container to DOM if it doesn't exist
document.addEventListener('DOMContentLoaded', function() {
  if (!document.getElementById('recaptcha-container')) {
    const recaptchaDiv = document.createElement('div');
    recaptchaDiv.id = 'recaptcha-container';
    
    // Insert before send OTP button
    if (sendOtpButton && sendOtpButton.parentNode) {
      sendOtpButton.parentNode.insertBefore(recaptchaDiv, sendOtpButton);
    } else {
      // Fallback: append to phone login container
      phoneContainer.appendChild(recaptchaDiv);
    }
  }
});

// Initialize reCAPTCHA verifier
let recaptchaVerifier;
window.onload = function() {
  try {
    // Create recaptcha verifier
    recaptchaVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container', {
      'size': 'normal',
      'callback': (response) => {
        // reCAPTCHA solved, enable button
        if (sendOtpButton) sendOtpButton.disabled = false;
      },
      'expired-callback': () => {
        // Response expired. Ask user to solve reCAPTCHA again.
        if (sendOtpButton) sendOtpButton.disabled = true;
      }
    });
    
    // Render the reCAPTCHA
    recaptchaVerifier.render().then(function(widgetId) {
      window.recaptchaWidgetId = widgetId;
    });
  } catch (error) {
    console.error("Error initializing reCAPTCHA:", error);
    showMessage('Error initializing verification system: ' + error.message, true);
  }
};

// Global confirmation result
let confirmationResult;

// Helper functions
function showMessage(text, isError = false) {
  if (!messageElement) {
    console.error("Message element not found");
    return;
  }
  
  messageElement.textContent = text;
  messageElement.className = isError ? 'error-message' : 'success-message';
  messageElement.classList.remove('hidden');
  
  // Auto-hide after 5 seconds
  setTimeout(() => {
    messageElement.classList.add('hidden');
  }, 5000);
}

// Lock phone input and hide the reCAPTCHA container
function lockPhoneInput() {
  if (phoneInput) {
    phoneInput.classList.add('locked-input');
    phoneInput.setAttribute('readonly', 'readonly');
  }
  
  // Hide reCAPTCHA after verification - this preserves the state
  if (recaptchaContainer) {
    recaptchaContainer.style.opacity = '0.5';
    recaptchaContainer.style.pointerEvents = 'none';
  }
}

// Send OTP
if (sendOtpButton) {
  sendOtpButton.addEventListener('click', () => {
    if (!phoneInput) {
      console.error("Phone input element not found");
      return;
    }
    
    const phoneNumber = phoneInput.value.trim();
    
    if (!phoneNumber) {
      showMessage('Please enter a valid phone number', true);
      return;
    }
    
    // Check if recaptcha verifier exists
    if (!recaptchaVerifier) {
      console.error("reCAPTCHA verifier not initialized");
      showMessage('Verification system not ready. Please refresh the page.', true);
      return;
    }
    
    // Show loading state
    sendOtpButton.disabled = true;
    sendOtpButton.textContent = 'Sending...';
    
    auth.signInWithPhoneNumber(phoneNumber, recaptchaVerifier)
      .then(result => {
        // SMS sent successfully
        confirmationResult = result;
        showMessage('Verification code sent to your phone!');
        
        // Lock phone input to prevent further changes
        lockPhoneInput();
        
        // Change the button text back
        sendOtpButton.textContent = 'OTP Sent';
        
        // Show OTP input
        otpContainer.classList.remove('hidden');
      })
      .catch(error => {
        console.error("Error sending OTP:", error);
        showMessage('Error sending verification code: ' + error.message, true);
        
        // Reset button state
        sendOtpButton.disabled = false;
        sendOtpButton.textContent = 'Send OTP';
        
        // Reset reCAPTCHA only if there was an error
        if (window.recaptchaWidgetId !== undefined) {
          grecaptcha.reset(window.recaptchaWidgetId);
        } else if (recaptchaVerifier) {
          recaptchaVerifier.clear();
          initializeRecaptcha();
        }
      });
  });
}

// Function to reinitialize recaptcha if needed
function initializeRecaptcha() {
  try {
    recaptchaVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container', {
      'size': 'normal',
      'callback': (response) => {
        if (sendOtpButton) sendOtpButton.disabled = false;
      },
      'expired-callback': () => {
        if (sendOtpButton) sendOtpButton.disabled = true;
      }
    });
    
    recaptchaVerifier.render().then(function(widgetId) {
      window.recaptchaWidgetId = widgetId;
    });
  } catch (error) {
    console.error("Error reinitializing reCAPTCHA:", error);
  }
}

// Verify OTP
if (verifyOtpButton) {
  verifyOtpButton.addEventListener('click', () => {
    if (!otpInput) {
      console.error("OTP input element not found");
      return;
    }
    
    const otp = otpInput.value.trim();
    
    if (!otp) {
      showMessage('Please enter the verification code', true);
      return;
    }
    
    if (!confirmationResult) {
      showMessage('No verification in progress. Please request a new code.', true);
      return;
    }
    
    // Show loading state
    verifyOtpButton.disabled = true;
    verifyOtpButton.textContent = 'Verifying...';
    
    confirmationResult.confirm(otp)
      .then(result => {
        // OTP verified successfully
        showMessage('Phone verified successfully!');
        
        // Get the ID token
        return result.user.getIdToken();
      })
      .then(idToken => {
        // Send the token to your server
        return fetch('/auth/phone/verify', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ idToken }),
          credentials: 'include'
        });
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          showMessage('Login successful! Redirecting...');
          // Redirect to blog page
          setTimeout(() => {
            window.location.href = data.redirect || '/blog';
          }, 1000);
        } else {
          showMessage('Server error: ' + data.message, true);
          // Reset button state
          verifyOtpButton.disabled = false;
          verifyOtpButton.textContent = 'Verify';
        }
      })
      .catch(error => {
        console.error("Error verifying OTP:", error);
        showMessage('Error verifying code: ' + error.message, true);
        
        // Reset button state
        verifyOtpButton.disabled = false;
        verifyOtpButton.textContent = 'Verify';
      });
  });
}
    </script>
   
    <div id="email-login">
        <a href="/auth/google" class="btn google-btn">Sign In with Google</a>
    </div>
   
    <div id="aadhaar-login" style="display: none;">
        <div class="form-group">
            <label for="aadhaar-number">Aadhaar Number</label>
            <input type="text" id="aadhaar-number" class="form-control" placeholder="Enter your 12-digit Aadhaar number">
        </div>
        <button id="aadhaar-continue-btn" class="btn">Continue with Aadhaar</button>
    </div>
    <div id="password-login" style="display: none;">
     <div class="form-group">
         <label for="login-password">Password</label>
         <input type="password" id="login-password" class="form-control" placeholder="Enter your password">
     </div>
     <button class="btn">Continue</button>
 </div>
 
   
   
   
    


<%- include('partials/loginFooter') %>